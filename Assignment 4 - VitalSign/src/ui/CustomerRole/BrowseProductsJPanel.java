/*
 * BrowseProducts.java
 *
 * Created on October 10, 2008, 9:10 AM
 */
package ui.CustomerRole;

import model.Patient;
import model.Supplier;
import model.SupplierDirectory;
import ui.CustomerRole.ViewProductDetailJPanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
//import model.MasterCarList;
import ui.SupplierRole.SupplierWorkAreaJPanel;


/**
 *
 * @author Rushabh
 */
public class BrowseProductsJPanel extends javax.swing.JPanel {
    
JPanel userProcessContainer;
SupplierDirectory supplierDirectory;
//MasterCarList masterCarList;
Patient pro;
Supplier s;
    /** Creates new form BrowseProducts */
    public BrowseProductsJPanel(JPanel userProcessContainer, SupplierDirectory supplierDirectory) {
        initComponents();
        this.userProcessContainer= userProcessContainer;
        this.supplierDirectory = supplierDirectory;
        //this.masterCarList = masterCarList;
        //this.pro = pro;
        //this.s = s;
        
        populateCombo();
        populateProductTable();
        //populateProductTable();
        //populateProductTableBasedonLocation();
        
    }

    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblSupplier = new javax.swing.JLabel();
        cmbSupplier = new javax.swing.JComboBox();
        lblProductCatalogue = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductCatalog = new javax.swing.JTable();
        btnProductDetails = new javax.swing.JButton();
        lblSupplier1 = new javax.swing.JLabel();
        txtCount = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(650, 600));

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblSupplier.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblSupplier.setText("Community:");

        cmbSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierActionPerformed(evt);
            }
        });

        lblProductCatalogue.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblProductCatalogue.setText("Abnormal Patient Records:");

        tblProductCatalog.setBackground(new java.awt.Color(255, 204, 204));
        tblProductCatalog.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        tblProductCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Temperature", "Pulse Rate", "Blood Pressure"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductCatalog);

        btnProductDetails.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnProductDetails.setText("View Patient Records");
        btnProductDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductDetailsActionPerformed(evt);
            }
        });

        lblSupplier1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblSupplier1.setText("Total number :");

        lblTitle.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblTitle.setText("Abnormal Patients");
        lblTitle.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        lblTitle.setIconTextGap(50);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProductCatalogue)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSupplier1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(btnProductDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(lblTitle))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblProductCatalogue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSupplier1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnProductDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(241, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierActionPerformed
        // TODO add your handling code here:
        populateProductTable();
    }//GEN-LAST:event_cmbSupplierActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnProductDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblProductCatalog.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(this,"Please select the record first");
            return;
        }
        Patient p = (Patient) tblProductCatalog.getValueAt(selectedRow, 0);
        ViewProductDetailJPanel vp = new ViewProductDetailJPanel(userProcessContainer, p);
        userProcessContainer.add("ViewProductDetailJPanel", vp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnProductDetailsActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnProductDetails;
    private javax.swing.JComboBox cmbSupplier;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblProductCatalogue;
    private javax.swing.JLabel lblSupplier;
    private javax.swing.JLabel lblSupplier1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblProductCatalog;
    private javax.swing.JTextField txtCount;
    // End of variables declaration//GEN-END:variables

   // private void populateCombo(Supplier s) {
        
   //   if(s.getSupplyName().isEmpty() == false)
   //   {   cmbSupplier.removeAllItems();
   //        cmbSupplier.addItem(s);
    //   }
   // }
     private void populateCombo() {
        cmbSupplier.removeAllItems();
        for(Supplier s : supplierDirectory.getSupplierlist())
           
            cmbSupplier.addItem(s);
    }

    private void populateProductTable() {
       Supplier selectedSupplier = (Supplier) cmbSupplier.getSelectedItem();
       if(selectedSupplier == null)
       {
           return;
       }
       
       DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
       model.setRowCount(0);
       int count = 0;
       for (Patient p : selectedSupplier.getPatientCatalog().getPatientcatalog()) {
        boolean flag = false;
            if (p.getAge() > 0 && p.getAge() < 0.1) {
                if ((p.getBloodPressure() >= 50 && p.getBloodPressure() <= 70)) {
                  flag = true;
                }
                  else
                { 
                  flag = false;
                }
                
            } else if (p.getAge() <= 1) {
                if ((p.getBloodPressure() >= 70 && p.getBloodPressure() <= 100)) {
                  flag = true;   
                } 
                 else
                { 
                  flag = false;
                }
            } else if (p.getAge() > 1 && p.getAge() <= 3) {
                if ((p.getBloodPressure() >= 80 && p.getBloodPressure() <= 110)) {
                  flag = true;   
                } 
                 else
                { 
                  flag = false;
                }
            } else if (p.getAge() > 3 && p.getAge() <= 5) {
                if ((p.getBloodPressure() >= 80 && p.getBloodPressure() <= 110)) {
                  flag = true;    
                } 
                 else
                { 
                  flag = false;
                }
            } else if (p.getAge() >= 6 && p.getAge() <= 12) {
                if ((p.getBloodPressure() >= 80 && p.getBloodPressure() <= 120)) {
                   flag = true;   
                } 
                 else
                { 
                  flag = false;
                }
            } else if (p.getAge() >= 13) {
                if ((p.getBloodPressure() >= 110 && p.getBloodPressure() <= 120)) {
                 flag = true;     
                } 
                 else
                { 
                  flag = false;
                }
            }
            
            if(flag== false)
            {
            count++;
            Object row[] = new Object[5];
            row[0] = p;
            row[1] = p.getAge();
            row[2] = p.getTemperature();
            row[3] = p.getPulseRate();
            row[4] = p.getBloodPressure();
            model.addRow(row);
            
            }
            
       
    }
      txtCount.setText(String.valueOf(count));
      txtCount.setEditable(false);
    
//    private void populateProductTable(String keyWord) {
//       Supplier selectedSupplier = (Supplier) cmbSupplier.getSelectedItem();
//       if(selectedSupplier == null)
//       {
//           return;
//       }
//       
//       DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
//       model.setRowCount(0);
//       for(Supplier s : supplierDirectory.getSupplierlist()){
//        for (Product p : s.getProductCatalog().getProductcatalog()) {
//            if(p.getProdName().equalsIgnoreCase(keyWord)){
//            Object row[] = new Object[6];
//            row[0] = p;
//            row[1] = p.getModelNumber();
//            row[2] = p.getPrice();
//            row[3] = p.getAddr();
//            row[4] = p.getSerialNumber();
//            row[5] = p.getSeats();
//            model.addRow(row);
//         }
//        }
//       }
//    }

    }
}
