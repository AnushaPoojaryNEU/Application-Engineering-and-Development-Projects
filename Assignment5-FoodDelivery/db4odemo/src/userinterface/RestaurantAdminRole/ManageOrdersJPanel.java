/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.RestaurantAdminRole;

import Business.DeliveryMan.DeliveryManDirectory;
import Business.Restaurant.Restaurant;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anu61
 */
public class ManageOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOrdersJPanel
     */
    JPanel userProcessContainer;
    Restaurant restaurant;
    UserAccount userAccount;
    DeliveryManDirectory deliveryManDirectory;
    
    public ManageOrdersJPanel(JPanel userProcessContainer, UserAccount userAccount, Restaurant restaurant, DeliveryManDirectory deliveryManDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.restaurant = restaurant;
        this.userAccount = userAccount;
        this.deliveryManDirectory = deliveryManDirectory;
        populateOrderTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrderJTable = new javax.swing.JTable();
        acceptOrder = new javax.swing.JButton();
        declineOrder = new javax.swing.JButton();
        assignBtn = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 0));
        jLabel1.setText("Manage Orders");

        OrderJTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        OrderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order Id", "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(OrderJTable);

        acceptOrder.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        acceptOrder.setText("Accept Order");
        acceptOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptOrderActionPerformed(evt);
            }
        });

        declineOrder.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        declineOrder.setText("Decline Order");
        declineOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineOrderActionPerformed(evt);
            }
        });

        assignBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        assignBtn.setText("Assign Delivery Man");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(329, 329, 329)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(422, 422, 422)
                        .addComponent(acceptOrder)
                        .addGap(107, 107, 107)
                        .addComponent(declineOrder))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(490, 490, 490)
                        .addComponent(assignBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(475, 475, 475)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(backJButton)))
                .addContainerGap(712, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(backJButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(53, 53, 53)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptOrder)
                    .addComponent(declineOrder))
                .addGap(49, 49, 49)
                .addComponent(assignBtn)
                .addContainerGap(337, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void acceptOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptOrderActionPerformed
        // TODO add your handling code here:
        int selectedRow = OrderJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select an order");
            return;
        }
        WorkRequest request = (WorkRequest) OrderJTable.getValueAt(selectedRow, 0);
        if (!request.getStatus().equals("Pending")) {
            JOptionPane.showMessageDialog(null, "You cannot accept this order");
            return;
        }
        request.setStatus("Accepted");
        request.setReceiver(userAccount);
        int id = request.getId();
        System.out.println(id);
        UserAccount selectedAccount = request.getSender();
       
        JOptionPane.showMessageDialog(null, "Order Accepted Successfully!!");
        populateOrderTable();
        
    }//GEN-LAST:event_acceptOrderActionPerformed

    private void declineOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineOrderActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        int selectedRow = OrderJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select an order");
            return;
        }
        WorkRequest request = (WorkRequest) OrderJTable.getValueAt(selectedRow, 0);
        if (request.getStatus().equals("Pending")) {

            request.setStatus("Declined");
            request.setReceiver(userAccount);
            JOptionPane.showMessageDialog(null, "Order Declined");
            populateOrderTable();

        } else {
            JOptionPane.showMessageDialog(null, "You cannot decline this order");
            return;
        }
    }//GEN-LAST:event_declineOrderActionPerformed

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        int selectedRow = OrderJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select an order to assign");
            return;
        }
        WorkRequest request = (WorkRequest) OrderJTable.getValueAt(selectedRow, 0);
        if (!request.getStatus().equals("Accepted")) {
            JOptionPane.showMessageDialog(null, "You cannot assign Delivery Man to this order");
            return;
        }
        AssignDeliveryManJPanel assignDeliveryManJPanel = new AssignDeliveryManJPanel(userProcessContainer, userAccount, request, deliveryManDirectory);
        userProcessContainer.add("assignDeliveryMan", assignDeliveryManJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_assignBtnActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        AdminWorkAreaJPanel adminWorkArea = (AdminWorkAreaJPanel) component;
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable OrderJTable;
    private javax.swing.JButton acceptOrder;
    private javax.swing.JButton assignBtn;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton declineOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void populateOrderTable() 
    {
     DefaultTableModel df = (DefaultTableModel) OrderJTable.getModel();
        df.setRowCount(0);
        for (WorkRequest request : restaurant.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[5];

            row[0] = request;
            row[1] = request.getMessage();
           // row[2] = request.getMessage();
            row[2] = request.getSender();
            row[3] = request.getReceiver();
            row[4] = request.getStatus();
            df.addRow(row);
    }
    }

}
