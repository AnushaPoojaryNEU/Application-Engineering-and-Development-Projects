/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.CustomerRole;

import Business.Customer.Customer;
import Business.Restaurant.Menu;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anu61
 */
public class NewOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewOrderJPanel
     */
    private JPanel userProcessContainer;
    private RestaurantDirectory restaurantDirectory;
    private UserAccount userAccount;
    private Customer customer;
    ArrayList<Menu> cartItem;
    private Restaurant selectedRestaurant;
    
    public NewOrderJPanel(JPanel userProcessContainer, UserAccount userAccount, Customer customer, RestaurantDirectory restaurantDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.restaurantDirectory = restaurantDirectory;
        this.userAccount = userAccount;
        this.customer = customer;
        cartItem = new ArrayList<>();
        populateRestaurants();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        placeOrderBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        quantityJTxt = new javax.swing.JTextField();
        addOrderBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        menuJTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        removeItem = new javax.swing.JButton();
        restaurantJCombo = new javax.swing.JComboBox<>();

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Restaurant:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 153, 0));
        jLabel2.setText("Place Order");

        orderJTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Food Item", "Food Price", "Food Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderJTable);

        backBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        placeOrderBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        placeOrderBtn.setText("Place Order >>");
        placeOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeOrderBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Quantity:");

        quantityJTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityJTxtActionPerformed(evt);
            }
        });

        addOrderBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        addOrderBtn.setText("Add to Orders");
        addOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrderBtnActionPerformed(evt);
            }
        });

        menuJTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        menuJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Food Item", "Food Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(menuJTable);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("Cart: ");

        removeItem.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        removeItem.setText("Remove Item");
        removeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemActionPerformed(evt);
            }
        });

        restaurantJCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        restaurantJCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restaurantJComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(removeItem)
                .addGap(55, 55, 55))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(restaurantJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(113, 113, 113)
                                        .addComponent(addOrderBtn))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(86, 86, 86)
                                        .addComponent(jLabel2))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quantityJTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(256, 256, 256)
                        .addComponent(placeOrderBtn)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(backBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(restaurantJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantityJTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(addOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel4)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeItem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(placeOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(409, 409, 409)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(588, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(115, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustomerAreaJPanel customerAreaJPanel = (CustomerAreaJPanel) component;
        customerAreaJPanel.populateRequestTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void placeOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeOrderBtnActionPerformed
        // TODO add your handling code here:
        if (cartItem.size() == 0) {
            JOptionPane.showMessageDialog(null, "Please Place Order");
        } 
        else 
        {
            ConfirmOrderJPanel confirmOrderJPanel = new ConfirmOrderJPanel(userProcessContainer, userAccount, cartItem, selectedRestaurant);
            userProcessContainer.add("newOrderJPanel", confirmOrderJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            quantityJTxt.setText("");
            cartItem.clear();
            restaurantJCombo.setSelectedIndex(0);
        }
    }//GEN-LAST:event_placeOrderBtnActionPerformed

    private void quantityJTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityJTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityJTxtActionPerformed

    private void addOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderBtnActionPerformed
        // TODO add your handling code here:

        if (restaurantJCombo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Please select a restaurant.");
            return;
        }

        int selectedrow = menuJTable.getSelectedRow();
        if (selectedrow >= 0) {
            if (quantityJTxt.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Please add Quantity to add to order");
            } else {
                if (validNumber() == false) {
                    JOptionPane.showMessageDialog(null, "Please enter valid quantity.");
                    return;
                }
                Menu menu = (Menu) menuJTable.getValueAt(selectedrow, 0);
                menu.setQuantity(Integer.parseInt(quantityJTxt.getText()));
                cartItem.add(menu);
                if (cartItem.contains(menu)) {
                    menu.setQuantity(Integer.parseInt(quantityJTxt.getText()));
                }
                populateCartTable(menu);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Row");
        }
    }//GEN-LAST:event_addOrderBtnActionPerformed

    private void removeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemActionPerformed
        // TODO add your handling code here:
        int selectedrow = orderJTable.getSelectedRow();
        DefaultTableModel dtm = (DefaultTableModel) orderJTable.getModel();
        boolean flag = false;
        if (selectedrow >= 0) {
            Menu mn = (Menu) orderJTable.getValueAt(selectedrow, 0);
            for (int i = 0; i < cartItem.size(); i++) {
                System.out.println(mn.getItem());
                System.out.println(cartItem.get(i).getItem());
                if (mn.getItem().equals(cartItem.get(i).getItem())) {
                    System.out.println("in if");
                    cartItem.remove(i);
                    dtm.removeRow(selectedrow);
                    break;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Row");
        }
    }//GEN-LAST:event_removeItemActionPerformed

    private void restaurantJComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restaurantJComboActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) orderJTable.getModel();
        dtm.setRowCount(0);
        cartItem.clear();
        int a = restaurantJCombo.getSelectedIndex();

        String value = "";
        String name = "";
        String address = "";
        Restaurant restaurant = null;
        if (a >= 0) {
            value = restaurantJCombo.getSelectedItem().toString();
            name = value.split("-")[0];
            address = value.split("-")[1];

        }
        for (Restaurant rest : restaurantDirectory.getRestaurantList()) {
            if (name.equals(rest.getName()) && address.equals(rest.getAddress())) {
                restaurant = rest;
                selectedRestaurant = rest;
                break;
            }
        }
        if (restaurant != null) {
            populateMenuTable(restaurant);
        }
    }//GEN-LAST:event_restaurantJComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addOrderBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable menuJTable;
    private javax.swing.JTable orderJTable;
    private javax.swing.JButton placeOrderBtn;
    private javax.swing.JTextField quantityJTxt;
    private javax.swing.JButton removeItem;
    private javax.swing.JComboBox<String> restaurantJCombo;
    // End of variables declaration//GEN-END:variables

    private void populateRestaurants() {
        restaurantJCombo.removeAllItems();
        restaurantJCombo.insertItemAt("-- Select Restaurant --", 0);
        restaurantJCombo.setSelectedIndex(0);
        for (Restaurant rest : restaurantDirectory.getRestaurantList()) {
          restaurantJCombo.addItem(rest.getName() + "-" + rest.getAddress());
        }
    }

    private void populateMenuTable(Restaurant restaurant) {
        DefaultTableModel dtm = (DefaultTableModel) menuJTable.getModel();
        dtm.setRowCount(0);
        if (restaurant.getMenu().size() > 0) {
            for (Menu m : restaurant.getMenu()) {
                Object row[] = new Object[2];
                row[0] = m;
                row[1] = m.getPrice();
                dtm.addRow(row);
            }
        }
    }

    private void populateCartTable(Menu menu) {
        
         DefaultTableModel dtm = (DefaultTableModel) orderJTable.getModel();
        int rowCount = dtm.getRowCount();
        if (rowCount > 0) {
            for (int i = 0; i < rowCount; i++) {
                Menu mn = (Menu) orderJTable.getValueAt(i, 0);
                String name = mn.getItem();
                if (name.equals(menu.getItem())) {
                    orderJTable.setValueAt(menu.getQuantity(), i, 2);
                } else {
                    Object row[] = new Object[3];
                    row[0] = menu;
                    row[1] = menu.getPrice();
                    row[2] = menu.getQuantity();
                    dtm.addRow(row);
                }
            }
        } else {
            Object row[] = new Object[3];
            row[0] = menu;
            row[1] = menu.getPrice();
            row[2] = menu.getQuantity();
            dtm.addRow(row);
        }
    }

    private boolean validNumber() {
        Pattern p = Pattern.compile("[0-9]+");
        Matcher m = p.matcher(quantityJTxt.getText());
        Boolean b = m.matches();
        return b;
    }
}
