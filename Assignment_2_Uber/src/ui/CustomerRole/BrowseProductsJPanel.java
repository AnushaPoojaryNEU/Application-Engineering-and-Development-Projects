/*
 * BrowseProducts.java
 *
 * Created on October 10, 2008, 9:10 AM
 */
package ui.CustomerRole;

import model.Product;
import model.Supplier;
import model.SupplierDirectory;
import ui.CustomerRole.ViewProductDetailJPanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
//import model.MasterCarList;
import ui.SupplierRole.SupplierWorkAreaJPanel;


/**
 *
 * @author Rushabh
 */
public class BrowseProductsJPanel extends javax.swing.JPanel {
    
JPanel userProcessContainer;
SupplierDirectory supplierDirectory;
//MasterCarList masterCarList;
Product pro;
Supplier s;
    /** Creates new form BrowseProducts */
    public BrowseProductsJPanel(JPanel userProcessContainer, SupplierDirectory supplierDirectory, Product pro) {
        initComponents();
        this.userProcessContainer= userProcessContainer;
        this.supplierDirectory = supplierDirectory;
        //this.masterCarList = masterCarList;
        this.pro = pro;
        //this.s = s;
        
        populateCombo();
        populateProductTable();
        populateProductTable();
        //populateProductTableBasedonLocation();
        
    }

    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblSupplier = new javax.swing.JLabel();
        cmbSupplier = new javax.swing.JComboBox();
        lblProductCatalogue = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductCatalog = new javax.swing.JTable();
        btnProductDetails = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(650, 600));

        lblTitle.setBackground(new java.awt.Color(0, 0, 0));
        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(204, 0, 0));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/readytorideitout.png"))); // NOI18N
        lblTitle.setText("Have a wonderful experience!");
        lblTitle.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        lblTitle.setIconTextGap(20);

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblSupplier.setText("Supplier:");

        cmbSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierActionPerformed(evt);
            }
        });

        lblProductCatalogue.setText("Product Catalog:");

        tblProductCatalog.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        tblProductCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Car Name", "Car Model", "Price", "Location", "Serial Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductCatalog);

        btnProductDetails.setText("View Product Details");
        btnProductDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProductCatalogue)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(188, 188, 188)
                                .addComponent(btnProductDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTitle)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(btnBack))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblProductCatalogue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btnProductDetails)
                .addContainerGap(280, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierActionPerformed
        // TODO add your handling code here:
        populateProductTable();
    }//GEN-LAST:event_cmbSupplierActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnProductDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblProductCatalog.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(this,"Please select the product first");
            return;
        }
        Product p = (Product) tblProductCatalog.getValueAt(selectedRow, 0);
        ViewProductDetailJPanel vp = new ViewProductDetailJPanel(userProcessContainer, p);
        userProcessContainer.add("ViewProductDetailJPanel", vp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnProductDetailsActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnProductDetails;
    private javax.swing.JComboBox cmbSupplier;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblProductCatalogue;
    private javax.swing.JLabel lblSupplier;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblProductCatalog;
    // End of variables declaration//GEN-END:variables

   // private void populateCombo(Supplier s) {
        
   //   if(s.getSupplyName().isEmpty() == false)
   //   {   cmbSupplier.removeAllItems();
   //        cmbSupplier.addItem(s);
    //   }
   // }
     private void populateCombo() {
        cmbSupplier.removeAllItems();
        for(Supplier s : supplierDirectory.getSupplierlist())
           
            cmbSupplier.addItem(s);
    }

    private void populateProductTable() {
       Supplier selectedSupplier = (Supplier) cmbSupplier.getSelectedItem();
       if(selectedSupplier == null)
       {
           return;
       }
       
       DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
       model.setRowCount(0);
            
        if(pro.getBtnObject().equals("1"))  
        {
        for (Product p : selectedSupplier.getProductCatalog().getProductcatalog()) {
         if(p.getAddr().equalsIgnoreCase(pro.getAddr()))
         
          { 
            Object row[] = new Object[6];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAddr();
            row[4] = p.getSerialNumber();
            row[5] = p.getSeats();
            model.addRow(row);
            
            return;
          }
         }
        }
        if(pro.getBtnObject().equals("2")) {
        for (Product p : selectedSupplier.getProductCatalog().getProductcatalog()) {
         if((p.getAddr().equalsIgnoreCase(pro.getAddr())) && p.getAvail()) 
          { 
            Object row[] = new Object[6];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAddr();
            row[4] = p.getSerialNumber();
            row[5] = p.getSeats();
            model.addRow(row);
            
          }
            
        }  
        }
        if(pro.getBtnObject().equals("4")) {
        for (Product p : selectedSupplier.getProductCatalog().getProductcatalog()) {
         if(p.getYear() == pro.getYear())
          { 
            Object row[] = new Object[6];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAddr();
            row[4] = p.getSerialNumber();
            row[5] = p.getSeats();
            model.addRow(row);
            
          }
            
        }  
        }
        if(pro.getBtnObject().equals("5")) {
        for (Product p : selectedSupplier.getProductCatalog().getProductcatalog()) {
         if(p.getSeats() <= pro.getSeats())
          { 
           Object row[] = new Object[6];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAddr();
            row[4] = p.getSerialNumber();
            row[5] = p.getSeats();
            model.addRow(row);
             
          }
            
        }  
        }
        if(pro.getBtnObject().equals("6")) {
        for (Product p : selectedSupplier.getProductCatalog().getProductcatalog()) {
         if(p.getSerialNumber().equalsIgnoreCase(pro.getSerialNumber()))
          { 
           Object row[] = new Object[6];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAddr();
            row[4] = p.getSerialNumber();
            row[5] = p.getSeats();
            model.addRow(row);
           }
            
        }  
        }
        if(pro.getBtnObject().equals("7")) {
        for (Product p : selectedSupplier.getProductCatalog().getProductcatalog()) {
         if(p.getModelNumber().equalsIgnoreCase(pro.getModelNumber()))
          { 
             Object row[] = new Object[6];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAddr();
            row[4] = p.getSerialNumber();
            row[5] = p.getSeats();
            model.addRow(row);
           
          }
            
        }  
        }
        if(pro.getBtnObject().equals("8")) {
        for (Product p : selectedSupplier.getProductCatalog().getProductcatalog()) {
         if(p.getExpiredMainCerti())
          { 
            Object row[] = new Object[6];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAddr();
            row[4] = p.getSerialNumber();
            row[5] = p.getSeats();
            model.addRow(row);
            
          }
            
        }  
        }
        if(pro.getBtnObject().equals("10")) {
        for (Product p : selectedSupplier.getProductCatalog().getProductcatalog()) {
         if(p.getAvail())
          { 
             Object row[] = new Object[6];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAddr();
            row[4] = p.getSerialNumber();
            row[5] = p.getSeats();
            model.addRow(row);
           
          }
            
        }  
        }

    }
    
    private void populateProductTable(String keyWord) {
       Supplier selectedSupplier = (Supplier) cmbSupplier.getSelectedItem();
       if(selectedSupplier == null)
       {
           return;
       }
       
       DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
       model.setRowCount(0);
       for(Supplier s : supplierDirectory.getSupplierlist()){
        for (Product p : s.getProductCatalog().getProductcatalog()) {
            if(p.getProdName().equalsIgnoreCase(keyWord)){
            Object row[] = new Object[6];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAddr();
            row[4] = p.getSerialNumber();
            row[5] = p.getSeats();
            model.addRow(row);
         }
        }
       }
    }

 
}
